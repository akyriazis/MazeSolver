Student Name #1: Alex Kyriazis
Student ugrad login #1: s3x9a

Student Name #2: Lin Xiang
Student ugrad login #2: o8a0b

TODO: Acknowledgment that you understand and have followed the course's collaboration policy
(http://www.ugrad.cs.ubc.ca/~cs221/current/syllabus.shtml#conduct): 

Signed, Alex Kyriazis, Lin Xiang

TODO: submit using: make handin-earlybird
(Run that from one of the UBC ugrad computers, after you have transfered
your files there and tested to make sure they work correctly on our systems.)

----------------------------------------------------------------------

Questions:

For the explanations, generally a sentence or two should be enough.
Type your answers directly in this file.


1.  Compile and run the solve.cpp program, using the makefile.
Watch the program solve a maze using DFS.  How many steps long was
the solution?

58 steps

2.  Edit solve.cpp to switch to the LinkedListStack.  Keep the same
maze.  How many steps long was the solution?

58 steps

3.  Edit solve.cpp to change the maze to Maze 2.  How many steps long
was the solution?

46 steps

4.  Edit solve.cpp to change the maze to Maze 3.  How many steps long
was the solution?

247 steps

5.  Edit solve.cpp to change the maze to Maze 4.  How many steps long
was the solution?

110 steps

6.  By looking at these examples, and by looking at the TextMaze.cpp class,
which direction does the TextMaze class try to explore first when doing DFS?.

the priority of possible motion is left, up, right, down

7.  Next, edit solve.cpp again to switch to make activeStates
an UnsortedPriorityQueue.  This gives you best-first search (BestFS).
Repeat how many steps long is the solution for Mazes 1, 2, 3, and 4?
Do you see why DFS is called DFS, and BestFS isn't always best?

Maze 1: 58
Maze 2: 14
Maze 3: 5
Maze 4: 90

BestFS is greedy, and will only look for the short-term best solution. However, sometimes in the long-term, the situation needs to get worse, for it to get better. This is a situation BFS performs poorly in.

DFS is called DFS because it searches very deeply in one direction before  moving onto a different decision-branch at the beginning.

8.  Edit solve.cpp to solve the empty Sudoku board.  (You should
only comment out one line and uncomment one line to do that.)
Then change the delay in the usleep delay in the solveMaze function
to 100000.  What solution do you get?

 1 2 3 4 5 6 7 8 9
 4 5 6 7 8 9 1 2 3
 7 8 9 1 2 3 4 5 6
 2 1 4 3 6 5 8 9 7
 3 6 5 8 9 7 2 1 4
 8 9 7 2 1 4 3 6 5
 5 3 1 6 4 2 9 7 8
 6 4 2 9 7 8 5 3 1
 9 7 8 5 3 1 6 4 2

9.  Edit solve.cpp to switch to the 3x3 slider puzzle.  (Be careful not
to use the unsolvable 3x3!)  Also, comment out the delay and print
statements in the solveMazefunction.  (Try it first with the delay and
print, so you can watch the solving process, but take them out for
timing.) How long (time in seconds) does it take to solve this problem
with BestFS (using UnsortedPriorityQueue as in the preceding question)?

Practically instant. (less than one second)

10.  Edit solve.cpp to switch back to ArrayStack or LinkedListStack,
which switches back to DFS.  Try solving the 3x3 slider puzzle.
What happens?  Why?

7min 40sec. Very long.

Just intuitively thinking about how DFS compares to BestFS, DFS would be slow. This is because the decision tree for the slider is very tall, and DFS will take a lot of time exploring deeply in one tall subset of states that is most likely very far off from the solution. This is not very efficient and understandably takes a lot of time.

BestFS is more efficient because there are no large obvious 'barriers' between the initial state and the solution that would make BestFS unfavourable. Also, 'correctness' is very easy to quantify for this problem. With a bias towards ordering numbers in the correct places, the state traversal will always tend to the actual solution.



----------------------------------------------------------------------
